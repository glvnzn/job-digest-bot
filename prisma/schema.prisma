generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id             String      @id
  title          String
  company        String
  location       String?
  isRemote       Boolean     @default(false) @map("is_remote")
  description    String?
  requirements   String[]
  applyUrl       String      @map("apply_url")
  salary         String?
  postedDate     DateTime?   @map("posted_date")
  source         String
  relevanceScore Float?      @map("relevance_score")
  emailMessageId String      @map("email_message_id")
  processed      Boolean     @default(false)
  createdAt      DateTime    @default(now()) @map("created_at")
  insights       JobInsight?
  userJobs       UserJob[]

  @@map("jobs")
}

model ResumeAnalysis {
  id             Int      @id @default(autoincrement())
  skills         String[]
  experience     String[]
  preferredRoles String[] @map("preferred_roles")
  seniority      String?
  analyzedAt     DateTime @default(now()) @map("analyzed_at")

  @@map("resume_analysis")
}

model ProcessedEmail {
  messageId     String   @id @map("message_id")
  subject       String?
  fromEmail     String?  @map("from_email")
  processedAt   DateTime @default(now()) @map("processed_at")
  jobsExtracted Int      @default(0) @map("jobs_extracted")
  deleted       Boolean  @default(false)

  @@map("processed_emails")
}

model JobLock {
  lockName  String   @id @map("lock_name")
  lockedAt  DateTime @default(now()) @map("locked_at")
  lockedBy  String   @default("system") @map("locked_by")
  expiresAt DateTime @map("expires_at")

  @@map("job_locks")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  googleId        String        @unique @map("google_id")
  name            String?
  avatarUrl       String?       @map("avatar_url")
  isAdmin         Boolean       @default(false) @map("is_admin")
  settings        Json          @default("{}")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  customJobStages JobStage[]
  insights        UserInsight[]
  userJobs        UserJob[]

  @@map("users")
}

model JobStage {
  id        Int       @id @default(autoincrement())
  userId    String?   @map("user_id")
  name      String
  color     String    @default("#3B82F6")
  sortOrder Int       @map("sort_order")
  isSystem  Boolean   @default(false) @map("is_system")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userJobs  UserJob[]

  @@unique([name, isSystem])
  @@map("job_stages")
}

model UserJob {
  id                Int       @id @default(autoincrement())
  userId            String    @map("user_id")
  jobId             String    @map("job_id")
  stageId           Int       @map("stage_id")
  isTracked         Boolean   @default(true) @map("is_tracked")
  appliedDate       DateTime? @map("applied_date")
  interviewDate     DateTime? @map("interview_date")
  notes             String?
  applicationUrl    String?   @map("application_url")
  contactPerson     String?   @map("contact_person")
  salaryExpectation Int?      @map("salary_expectation")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  job               Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  stage             JobStage  @relation(fields: [stageId], references: [id])
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("user_jobs")
}

model TechTrend {
  id          Int               @id @default(autoincrement())
  technology  String            @unique
  category    String
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  weeklyStats TechTrendWeekly[]

  @@map("tech_trends")
}

model TechTrendWeekly {
  id          Int       @id @default(autoincrement())
  trendId     Int       @map("trend_id")
  weekStart   DateTime  @map("week_start")
  mentions    Int       @default(0)
  jobCount    Int       @default(0) @map("job_count")
  percentage  Float     @default(0)
  avgSalary   Int?      @map("avg_salary")
  growthRate  Float     @default(0) @map("growth_rate")
  trendStatus String    @default("stable") @map("trend_status")
  createdAt   DateTime  @default(now()) @map("created_at")
  techTrend   TechTrend @relation(fields: [trendId], references: [id], onDelete: Cascade)

  @@unique([trendId, weekStart])
  @@map("tech_trend_weekly")
}

model JobInsight {
  id                Int      @id @default(autoincrement())
  jobId             String   @unique @map("job_id")
  technologies      Json
  skillRequirements Json
  experienceLevel   String?  @map("experience_level")
  salaryRange       Json?    @map("salary_range")
  keySkills         Json     @map("key_skills")
  niceToHave        Json     @map("nice_to_have")
  responsibilities  Json
  benefits          Json?
  competitiveness   Float    @default(0)
  rarityScore       Float    @default(0) @map("rarity_score")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_insights")
}

model MarketSnapshot {
  id              Int      @id @default(autoincrement())
  snapshotDate    DateTime @unique @map("snapshot_date")
  totalJobs       Int      @map("total_jobs")
  avgSalaryRange  Json     @map("avg_salary_range")
  topTechnologies Json     @map("top_technologies")
  emergingSkills  Json     @map("emerging_skills")
  marketTrends    Json     @map("market_trends")
  salaryTrends    Json     @map("salary_trends")
  skillDemand     Json     @map("skill_demand")
  recommendations Json?
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("market_snapshots")
}

model UserInsight {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id")
  currentSkills   Json     @map("current_skills")
  skillGaps       Json     @map("skill_gaps")
  recommendations Json
  learningPath    Json     @map("learning_path")
  achievements    Json?
  goals           Json?
  marketPosition  Json     @map("market_position")
  competitiveness Float    @default(0)
  version         Int      @default(1)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, version])
  @@map("user_insights")
}
