/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all jobs with filtering
         * @description Get paginated list of jobs with optional filtering by search, company, location, remote status, relevance score, and tracking status
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search in title, company, description */
                    search?: string;
                    /** @description Filter by company name */
                    company?: string;
                    /** @description Filter by location */
                    location?: string;
                    /** @description Filter by remote status */
                    remote?: boolean;
                    /** @description Minimum relevance score */
                    minRelevanceScore?: number;
                    /** @description Show only jobs not tracked by current user (requires authentication) */
                    untracked?: boolean;
                    /** @description Page size (max 100) */
                    limit?: number;
                    /** @description Pagination offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jobs retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Job"][];
                            meta?: components["schemas"]["PaginationMeta"];
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Job: {
            /** @example job_123 */
            id: string;
            /** @example Senior Software Engineer */
            title: string;
            /** @example Tech Corp */
            company: string;
            /** @example San Francisco, CA */
            location?: string | null;
            /** @example true */
            isRemote: boolean;
            /** @example Full-time software engineering role... */
            description?: string | null;
            /**
             * Format: uri
             * @example https://jobs.example.com/123
             */
            applyUrl: string;
            /** @example $120k - $180k */
            salary?: string | null;
            /** Format: date-time */
            postedDate?: string | null;
            /** @example LinkedIn */
            source: string;
            /** @example 0.85 */
            relevanceScore?: number | null;
            /** @example true */
            processed: boolean;
            /** @example false */
            contentExtracted: boolean;
            /**
             * @example pending
             * @enum {string}
             */
            extractionStatus: "pending" | "success" | "partial" | "failed" | "skipped";
            /** @example Failed to fetch URL content */
            extractionError?: string | null;
            /** @example 1 */
            extractionAttempts: number;
            /** Format: date-time */
            lastExtractionAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** @example Jan 15, 2024 */
            formattedPostedDate?: string | null;
            /** @example Jan 15, 2024 */
            formattedCreatedAt: string;
            /** @example 85 */
            relevancePercentage: number;
            /**
             * @example default
             * @enum {string}
             */
            relevanceBadgeVariant: "default" | "secondary";
        };
        User: {
            /** @example 1 */
            id: number;
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /** @example 12345678901234567890 */
            googleId: string;
            /** @example John Doe */
            name?: string | null;
            /** Format: uri */
            avatarUrl?: string | null;
            /** @example false */
            isAdmin: boolean;
            /** @example {
             *       "emailNotifications": true,
             *       "theme": "light"
             *     } */
            settings: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        JobStage: {
            /** @example 1 */
            id: number;
            /** @example null */
            userId?: number | null;
            /** @example Interested */
            name: string;
            /** @example #3B82F6 */
            color: string;
            /** @example 1 */
            sortOrder: number;
            /** @example true */
            isSystem: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        UserJob: {
            /** @example 1 */
            id: number;
            /** @example 1 */
            userId: number;
            /** @example job_123 */
            jobId: string;
            /** @example 1 */
            stageId: number;
            /** @example true */
            isTracked: boolean;
            /** Format: date-time */
            appliedDate?: string | null;
            /** Format: date-time */
            interviewDate?: string | null;
            /** @example Looks promising, matches my skills */
            notes?: string | null;
            /** Format: uri */
            applicationUrl?: string | null;
            /** @example Jane Smith */
            contactPerson?: string | null;
            /** @example 150000 */
            salaryExpectation?: number | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ApiResponse: {
            /** @example true */
            success: boolean;
            data?: Record<string, never> | null;
            error?: string | null;
            message?: string | null;
        };
        PaginationMeta: {
            /** @example 150 */
            total: number;
            /** @example 20 */
            limit: number;
            /** @example 0 */
            offset: number;
            /** @example 20 */
            count: number;
        };
        JobFilters: {
            /**
             * @description Search in title, company, description
             * @example software engineer
             */
            search?: string;
            /**
             * @description Filter by company name
             * @example Google
             */
            company?: string;
            /**
             * @description Filter by location
             * @example San Francisco
             */
            location?: string;
            /**
             * @description Filter by remote status
             * @example true
             */
            remote?: boolean;
            /**
             * @description Minimum relevance score
             * @example 0.7
             */
            minRelevanceScore?: number;
            /**
             * @description Show only jobs not tracked by current user
             * @example true
             */
            untracked?: boolean;
            /**
             * @description Page size
             * @example 20
             */
            limit?: number;
            /**
             * @description Pagination offset
             * @example 0
             */
            offset?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
